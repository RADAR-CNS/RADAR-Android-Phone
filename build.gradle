/*
 * Copyright 2017 The Hyve
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.18'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.1'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 7
        versionName '0.2-SNAPSHOT'
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.name == 'release') {
                outputFileName = "${archivesBaseName}-${android.defaultConfig.versionName}.aar"
            } else {
                outputFileName = "${archivesBaseName}-${android.defaultConfig.versionName}-${variant.name}.aar"
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
    }
}

//---------------------------------------------------------------------------//
// Configuration                                                             //
//---------------------------------------------------------------------------//

group = 'org.radarcns'
ext.moduleName = 'radar-android-phone'
ext.moduleDescription = 'Basic phone sensor plugin for RADAR passive remote monitoring app'
ext.githubRepoName = 'RADAR-CNS/radar-android-phone'
version = android.defaultConfig.versionName

ext.githubUrl = 'https://github.com/' + githubRepoName + '.git'
ext.issueUrl = 'https://github.com/' + githubRepoName + '/issues'
ext.website = 'http://radar-cns.org'

//---------------------------------------------------------------------------//
// Sources and classpath configurations                                      //
//---------------------------------------------------------------------------//

configurations.compile {
    resolutionStrategy.cacheChangingModulesFor 0, 'SECONDS'
}

repositories {
    jcenter()
    google()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

dependencies {
    api 'org.radarcns:radar-commons-android:0.5.1'
    implementation 'org.radarcns:radar-schemas-commons:0.2.3'

    api 'com.android.support:support-annotations:27.0.2'

    testImplementation 'junit:junit:4.12'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.25'
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//

ext.sharedManifest = manifest {
    attributes("Implementation-Title": moduleName,
            "Implementation-Version": version)
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
    manifest.from sharedManifest
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompiler.classpath
        }
    }
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives javadocJar
    archives sourcesJar
}

ext.pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'blootsvoets'
            name 'Joris Borgdorff'
            email 'joris@thehyve.nl'
            organization 'The Hyve'
        }
        developer {
            id 'MaximMoinat'
            name 'Maxim Moinat'
            email 'maxim@thehyve.nl'
            organization 'The Hyve'
        }
        developer {
            id 'strangepleasures'
            name 'Pavel Mikhailovskii'
            email 'pavel@thehyve.nl'
            organization 'The Hyve'
        }
    }
    issueManagement {
        system 'GitHub'
        url githubUrl + '/issues'
    }
    organization {
        name 'RADAR-CNS'
        url website
    }
    scm {
        connection 'scm:git:' + githubUrl
        url githubUrl
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        RadarPublication(MavenPublication) {
            artifact("${buildDir}/outputs/aar/${project.getName()}-${version}.aar")
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('description', moduleDescription)
                root.appendNode('name', moduleName)
                root.appendNode('url', githubUrl)

                //Creating additional node for dependencies
                def dependenciesNode = root.appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)

                android.libraryVariants.all { variant ->
                    if (variant.name == 'release') {
                        variant.compileConfiguration.allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        if (rule.module) {
                                            exclusionNode.appendNode('artifactId', rule.module)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override = false
    publications = ['RadarPublication']
    pkg {
        repo = project.group
        name = moduleName
        userOrg = 'radar-cns'
        desc = moduleDescription
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = moduleDescription
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
}

bintrayUpload.dependsOn 'assembleRelease'

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
            maven = true
        }
    }
}

artifactoryPublish {
    publications 'RadarPublication'
    dependsOn 'assembleRelease'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
    distributionType 'all'
}
